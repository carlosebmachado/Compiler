/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package br.univali.ttoproject.compiler.parser;


import br.univali.ttoproject.compiler.*;
import br.univali.ttoproject.vm.*;
import java.awt.*;import java.util.ArrayList;

public class Parser implements ParserConstants {
    private String errorMessages = "";
    private SemanticAnalysis semanticAnalysis = new SemanticAnalysis();

    public String getErrorMessages() {
        return errorMessages;
    }

    public SemanticAnalysis getSemanticAnalysis() {
        return semanticAnalysis;
    }

  final public void Start() throws ParseException {
    Program();
    jj_consume_token(0);
}

  final public void Program() throws ParseException {
    Header();
    jj_consume_token(PROGRAM);
    jj_consume_token(LBRACE);
    Define();
    Execute();
    jj_consume_token(RBRACE);
    ProgramIdentifier();
semanticAnalysis.action1();
}

  final public void Header() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HEADER:{
      jj_consume_token(HEADER);
      jj_consume_token(CHAR_CONST);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      Epsilon();
    }
}

  final public void ProgramIdentifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
semanticAnalysis.action2(token.image);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      Epsilon();
    }
}

  final public void Define() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFINE:{
      jj_consume_token(DEFINE);
      jj_consume_token(LBRACE);
      DefineBlock();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      Epsilon();
    }
}

  final public void DefineBlock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      NotVariable();
      VariableSel();
      break;
      }
    case VARIABLE:{
      Variable();
      NotVariableSel();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void NotVariable() throws ParseException {
    jj_consume_token(NOT);
    jj_consume_token(VARIABLE);
semanticAnalysis.action3();
    NotVariableList();
}

  final public void NotVariableList() throws ParseException {
    Type();
    jj_consume_token(IS);
    NotVariableIdentifierList();
semanticAnalysis.action4();
    Value();
semanticAnalysis.action5(token.image);
    jj_consume_token(DOT);
    NotVariableListSel();
}

  final public void NotVariableListSel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NATURAL_TYPE:
    case REAL_TYPE:
    case CHAR_TYPE:
    case BOOLEAN_TYPE:{
      NotVariableList();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      Epsilon();
    }
}

  final public void NotVariableSel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      NotVariable();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      Epsilon();
    }
}

  final public void Variable() throws ParseException {
    jj_consume_token(VARIABLE);
semanticAnalysis.action6();
    VariableList();
}

  final public void VariableList() throws ParseException {
    Type();
    jj_consume_token(IS);
    VariableIdentifierList();
semanticAnalysis.action4();
    jj_consume_token(DOT);
    VariableListSel();
}

  final public void VariableListSel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NATURAL_TYPE:
    case REAL_TYPE:
    case CHAR_TYPE:
    case BOOLEAN_TYPE:{
      VariableList();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      Epsilon();
    }
}

  final public void VariableSel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARIABLE:{
      Variable();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      Epsilon();
    }
}

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NATURAL_TYPE:{
      jj_consume_token(NATURAL_TYPE);
semanticAnalysis.action7();
      break;
      }
    case REAL_TYPE:{
      jj_consume_token(REAL_TYPE);
semanticAnalysis.action8();
      break;
      }
    case CHAR_TYPE:{
      jj_consume_token(CHAR_TYPE);
semanticAnalysis.action9();
      break;
      }
    case BOOLEAN_TYPE:{
      jj_consume_token(BOOLEAN_TYPE);
errorMessages += semanticAnalysis.action10();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void NotVariableIdentifierList() throws ParseException {
    jj_consume_token(IDENTIFIER);
errorMessages += semanticAnalysis.action11(token.image);
    NotVariableIdentifierListSel();
}

  final public void NotVariableIdentifierListSel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      NotVariableIdentifierList();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      Epsilon();
    }
}

  final public void VariableIdentifierList() throws ParseException {
    jj_consume_token(IDENTIFIER);
errorMessages += semanticAnalysis.action12(token.image);
    Index();
errorMessages += semanticAnalysis.action13();
    VariableIdentifierListSel();
}

  final public void VariableIdentifierListSel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      VariableIdentifierList();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      Epsilon();
    }
}

  final public void Index() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      jj_consume_token(NATURAL_CONST);
semanticAnalysis.action14(token.image);
      jj_consume_token(RBRACKET);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      Epsilon();
    }
}

  final public void Value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NATURAL_CONST:{
      jj_consume_token(NATURAL_CONST);
      break;
      }
    case REAL_CONST:{
      jj_consume_token(REAL_CONST);
      break;
      }
    case CHAR_CONST:{
      jj_consume_token(CHAR_CONST);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Execute() throws ParseException {
    jj_consume_token(EXECUTE);
    jj_consume_token(LBRACE);
    CommandList();
    jj_consume_token(RBRACE);
}

  final public void CommandList() throws ParseException {
    Command();
    jj_consume_token(DOT);
    CommandListSel();
}

  final public void CommandListSel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SET:
    case GET:
    case PUT:
    case VERIFY:
    case LOOP:
    case WHILE:{
      CommandList();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      Epsilon();
    }
}

  final public void Command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SET:{
      Set();
      break;
      }
    case GET:{
      Get();
      break;
      }
    case PUT:{
      Put();
      break;
      }
    case VERIFY:{
      Verify();
      break;
      }
    case LOOP:
    case WHILE:{
      Loop();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Set() throws ParseException {
    jj_consume_token(SET);
semanticAnalysis.action15();
    Expression();
    jj_consume_token(TO);
    VariableIdentifierList();
semanticAnalysis.action16();
}

  final public void Get() throws ParseException {
    jj_consume_token(GET);
semanticAnalysis.action17();
    jj_consume_token(LBRACE);
    VariableIdentifierList();
    jj_consume_token(RBRACE);
}

  final public void Put() throws ParseException {
    jj_consume_token(PUT);
    jj_consume_token(LBRACE);
    IdentifierListOrConstants();
    jj_consume_token(RBRACE);
}

  final public void IdentifierListOrConstants() throws ParseException {
    Item();
semanticAnalysis.action18();
    IdentifierListOrConstsSel();
}

  final public void IdentifierListOrConstsSel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      IdentifierListOrConstants();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      Epsilon();
    }
}

  final public void Item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
errorMessages += semanticAnalysis.action19(token.image);
      Index();
errorMessages += semanticAnalysis.action20();
      break;
      }
    case NATURAL_CONST:{
      jj_consume_token(NATURAL_CONST);
semanticAnalysis.action21(token.image);
      break;
      }
    case REAL_CONST:{
      jj_consume_token(REAL_CONST);
semanticAnalysis.action22(token.image);
      break;
      }
    case CHAR_CONST:{
      jj_consume_token(CHAR_CONST);
semanticAnalysis.action23(token.image);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Verify() throws ParseException {
    jj_consume_token(VERIFY);
    Expression();
    jj_consume_token(IS);
    Clauses();
semanticAnalysis.action24();
}

  final public void Clauses() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
semanticAnalysis.action25();
      jj_consume_token(LBRACE);
      CommandList();
      jj_consume_token(RBRACE);
      IsFalse();
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
semanticAnalysis.action26();
      jj_consume_token(LBRACE);
      CommandList();
      jj_consume_token(RBRACE);
      IsTrue();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void IsTrue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IS:{
      jj_consume_token(IS);
      jj_consume_token(TRUE);
semanticAnalysis.action27();
      jj_consume_token(LBRACE);
      CommandList();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      Epsilon();
    }
}

  final public void IsFalse() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IS:{
      jj_consume_token(IS);
      jj_consume_token(FALSE);
semanticAnalysis.action27();
      jj_consume_token(LBRACE);
      CommandList();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      Epsilon();
    }
}

  final public void Loop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LOOP:{
      jj_consume_token(LOOP);
semanticAnalysis.action28();
      jj_consume_token(LBRACE);
      CommandList();
      jj_consume_token(RBRACE);
      jj_consume_token(WHILE);
      Expression();
semanticAnalysis.action29();
      jj_consume_token(IS);
      jj_consume_token(TRUE);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
semanticAnalysis.action30();
      Expression();
semanticAnalysis.action31();
      jj_consume_token(IS);
      jj_consume_token(TRUE);
      jj_consume_token(DO);
      jj_consume_token(LBRACE);
      CommandList();
      jj_consume_token(RBRACE);
semanticAnalysis.action32();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Expression() throws ParseException {
    ExprArithLogic();
    ExpressionSel();
}

  final public void ExpressionSel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      jj_consume_token(EQUAL);
      ExprArithLogic();
semanticAnalysis.action33();
      break;
      }
    case DIFFERENT:{
      jj_consume_token(DIFFERENT);
      ExprArithLogic();
semanticAnalysis.action34();
      break;
      }
    case SMALLER:{
      jj_consume_token(SMALLER);
      ExprArithLogic();
semanticAnalysis.action35();
      break;
      }
    case GREATER:{
      jj_consume_token(GREATER);
      ExprArithLogic();
semanticAnalysis.action36();
      break;
      }
    case SMALLER_EQUAL:{
      jj_consume_token(SMALLER_EQUAL);
      ExprArithLogic();
semanticAnalysis.action37();
      break;
      }
    case GREATER_EQUAL:{
      jj_consume_token(GREATER_EQUAL);
      ExprArithLogic();
semanticAnalysis.action38();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      Epsilon();
    }
}

  final public void ExprArithLogic() throws ParseException {
    Term2();
    LessPriority();
}

  final public void LessPriority() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      Term2();
      LessPriority();
semanticAnalysis.action39();
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      Term2();
      LessPriority();
semanticAnalysis.action40();
      break;
      }
    case OR:{
      jj_consume_token(OR);
      Term2();
      LessPriority();
semanticAnalysis.action41();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      Epsilon();
    }
}

  final public void Term2() throws ParseException {
    Term1();
    MidPriority();
}

  final public void MidPriority() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULTIPLICATION:{
      jj_consume_token(MULTIPLICATION);
      Term1();
      MidPriority();
semanticAnalysis.action42();
      break;
      }
    case DIVISION:{
      jj_consume_token(DIVISION);
      Term1();
      MidPriority();
semanticAnalysis.action43();
      break;
      }
    case INTEGER_DIVISION:{
      jj_consume_token(INTEGER_DIVISION);
      Term1();
      MidPriority();
semanticAnalysis.action44();
      break;
      }
    case REST:{
      jj_consume_token(REST);
      Term1();
      MidPriority();
semanticAnalysis.action45();
      break;
      }
    case AND:{
      jj_consume_token(AND);
      Term1();
      MidPriority();
semanticAnalysis.action46();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      Epsilon();
    }
}

  final public void Term1() throws ParseException {
    Element();
    GreatPriority();
}

  final public void GreatPriority() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POWER:{
      jj_consume_token(POWER);
      Element();
      GreatPriority();
semanticAnalysis.action47();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      Epsilon();
    }
}

  final public void Element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
errorMessages += semanticAnalysis.action19(token.image);
      Index();
errorMessages += semanticAnalysis.action20();
      break;
      }
    case NATURAL_CONST:{
      jj_consume_token(NATURAL_CONST);
semanticAnalysis.action21(token.image);
      break;
      }
    case REAL_CONST:{
      jj_consume_token(REAL_CONST);
semanticAnalysis.action22(token.image);
      break;
      }
    case CHAR_CONST:{
      jj_consume_token(CHAR_CONST);
semanticAnalysis.action23(token.image);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
semanticAnalysis.action48();
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
semanticAnalysis.action49();
      break;
      }
    case LPARENTHESES:{
      jj_consume_token(LPARENTHESES);
      Expression();
      jj_consume_token(RPARANTHESES);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(LPARENTHESES);
      Expression();
      jj_consume_token(RPARANTHESES);
semanticAnalysis.action50();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Epsilon() throws ParseException {

}

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x8000000,0x0,0x400,0x1800,0x3c000,0x800,0x3c000,0x1000,0x3c000,0x0,0x0,0x40000000,0x0,0x3e80000,0x3e80000,0x0,0x0,0x0,0x2000,0x2000,0x3000000,0x0,0x0,0x0,0x0,0x800,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x700000,0x0,0x0,0x8,0x2700000,0x1800000,0x0,0x0,0x0,0x1f800,0x40030,0x20780,0x40,0x3f00001,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[63];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 26; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 63; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
